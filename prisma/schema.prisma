// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  firstName String
  lastName String
  email String 
  emailVerify Boolean @default(false)
  password String
  role Role @default(USER)
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt 
  schedules Schedule[]
  notes Note[]
  todolists TodoList[]
  myWorkspaces WorkSpace[]
  invitedWorkSpace User_WorkSpace[]
}

model Note{
  id Int @default(autoincrement()) @id
  title String @db.Text
  content String @db.LongText
  date String
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
  owner User ? @relation(fields: [ownerId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  ownerId Int ?
  workspace WorkSpace ? @relation(fields: [workspaceId],references: [id])
  workspaceId Int?
}

model Schedule{
  id Int @default(autoincrement()) @id
  title String
  description String? @db.Text
  color String
  width Int
  startDate String
  endDate String
  type String
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt 
  owner User @relation(fields: [ownerId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  ownerId Int
}

model TodoList {
  id Int @default(autoincrement()) @id
  title String
  description String @db.LongText
  dueDate String
  startTime String
  endTime String
  complete Boolean @default(false)
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt
  owner User @relation(fields: [ownerId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  ownerId Int
}

model WorkSpace{
  id Int @default(autoincrement()) @id
  title String
  description String @db.LongText
  createAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt 
  owner User @relation(fields: [ownerId],references: [id])
  ownerId Int
  invitedWorkSpace User_WorkSpace[]
  notes Note[]
}

model User_WorkSpace{
  user User @relation(fields: [userId],references: [id])
  userId Int
  workspace WorkSpace @relation(fields: [workspaceId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  workspaceId Int
  @@id([userId,workspaceId])
  createAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}
